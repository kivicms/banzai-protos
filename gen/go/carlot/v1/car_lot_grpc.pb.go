// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: carlot/v1/car_lot.proto

package carlotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CarLotService_GetCarLotByID_FullMethodName     = "/carlot.CarLotService/GetCarLotByID"
	CarLotService_GetCarLotsByIDs_FullMethodName   = "/carlot.CarLotService/GetCarLotsByIDs"
	CarLotService_GetPhotosByLotIDs_FullMethodName = "/carlot.CarLotService/GetPhotosByLotIDs"
)

// CarLotServiceClient is the client API for CarLotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC-сервис
type CarLotServiceClient interface {
	GetCarLotByID(ctx context.Context, in *CarLotByLotIDRequest, opts ...grpc.CallOption) (*CarLotByIDResponse, error)
	GetCarLotsByIDs(ctx context.Context, in *CarLotsByLotIDsRequest, opts ...grpc.CallOption) (*CarLotsByIDsResponse, error)
	GetPhotosByLotIDs(ctx context.Context, in *PhotosByLotIDsRequest, opts ...grpc.CallOption) (*PhotosByLotIDsResponse, error)
}

type carLotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarLotServiceClient(cc grpc.ClientConnInterface) CarLotServiceClient {
	return &carLotServiceClient{cc}
}

func (c *carLotServiceClient) GetCarLotByID(ctx context.Context, in *CarLotByLotIDRequest, opts ...grpc.CallOption) (*CarLotByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarLotByIDResponse)
	err := c.cc.Invoke(ctx, CarLotService_GetCarLotByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carLotServiceClient) GetCarLotsByIDs(ctx context.Context, in *CarLotsByLotIDsRequest, opts ...grpc.CallOption) (*CarLotsByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CarLotsByIDsResponse)
	err := c.cc.Invoke(ctx, CarLotService_GetCarLotsByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carLotServiceClient) GetPhotosByLotIDs(ctx context.Context, in *PhotosByLotIDsRequest, opts ...grpc.CallOption) (*PhotosByLotIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhotosByLotIDsResponse)
	err := c.cc.Invoke(ctx, CarLotService_GetPhotosByLotIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarLotServiceServer is the server API for CarLotService service.
// All implementations must embed UnimplementedCarLotServiceServer
// for forward compatibility.
//
// gRPC-сервис
type CarLotServiceServer interface {
	GetCarLotByID(context.Context, *CarLotByLotIDRequest) (*CarLotByIDResponse, error)
	GetCarLotsByIDs(context.Context, *CarLotsByLotIDsRequest) (*CarLotsByIDsResponse, error)
	GetPhotosByLotIDs(context.Context, *PhotosByLotIDsRequest) (*PhotosByLotIDsResponse, error)
	mustEmbedUnimplementedCarLotServiceServer()
}

// UnimplementedCarLotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCarLotServiceServer struct{}

func (UnimplementedCarLotServiceServer) GetCarLotByID(context.Context, *CarLotByLotIDRequest) (*CarLotByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarLotByID not implemented")
}
func (UnimplementedCarLotServiceServer) GetCarLotsByIDs(context.Context, *CarLotsByLotIDsRequest) (*CarLotsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarLotsByIDs not implemented")
}
func (UnimplementedCarLotServiceServer) GetPhotosByLotIDs(context.Context, *PhotosByLotIDsRequest) (*PhotosByLotIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotosByLotIDs not implemented")
}
func (UnimplementedCarLotServiceServer) mustEmbedUnimplementedCarLotServiceServer() {}
func (UnimplementedCarLotServiceServer) testEmbeddedByValue()                       {}

// UnsafeCarLotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarLotServiceServer will
// result in compilation errors.
type UnsafeCarLotServiceServer interface {
	mustEmbedUnimplementedCarLotServiceServer()
}

func RegisterCarLotServiceServer(s grpc.ServiceRegistrar, srv CarLotServiceServer) {
	// If the following call pancis, it indicates UnimplementedCarLotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CarLotService_ServiceDesc, srv)
}

func _CarLotService_GetCarLotByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarLotByLotIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLotServiceServer).GetCarLotByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarLotService_GetCarLotByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLotServiceServer).GetCarLotByID(ctx, req.(*CarLotByLotIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarLotService_GetCarLotsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarLotsByLotIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLotServiceServer).GetCarLotsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarLotService_GetCarLotsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLotServiceServer).GetCarLotsByIDs(ctx, req.(*CarLotsByLotIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarLotService_GetPhotosByLotIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotosByLotIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarLotServiceServer).GetPhotosByLotIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarLotService_GetPhotosByLotIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarLotServiceServer).GetPhotosByLotIDs(ctx, req.(*PhotosByLotIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarLotService_ServiceDesc is the grpc.ServiceDesc for CarLotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarLotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carlot.CarLotService",
	HandlerType: (*CarLotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarLotByID",
			Handler:    _CarLotService_GetCarLotByID_Handler,
		},
		{
			MethodName: "GetCarLotsByIDs",
			Handler:    _CarLotService_GetCarLotsByIDs_Handler,
		},
		{
			MethodName: "GetPhotosByLotIDs",
			Handler:    _CarLotService_GetPhotosByLotIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carlot/v1/car_lot.proto",
}
